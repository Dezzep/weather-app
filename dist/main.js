(()=>{"use strict";var e={99:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'body{background-color:#3f3f3f}main{background-color:#3f3f3f;display:grid;grid-template-rows:1fr 1fr;gap:20px}.dark-bg-text{color:#00ac7c}.weather{display:grid;grid-template-columns:1fr .8fr;grid-template-areas:"location location" "img  temp" "conditions button";align-content:center;justify-content:center;padding:2em;background-color:#8685ef}#location{grid-area:location;text-align:center;background-color:#8685ef}#conditions{grid-area:conditions}#temperature{grid-area:temp}#weather-icon{grid-area:img}#changeTemp{grid-area:button}.container-5day{display:grid;grid-template-rows:1fr 1fr}.container-5day h1{justify-self:center}.five-day-forecast{display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr}.five-day-forecast>div{display:grid;background-color:#8685ef;grid-template-rows:1fr 1fr;justify-content:center;align-items:center}#enter-city{display:flex;flex-direction:column;align-items:center;gap:10px}',"",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAGA,KACE,wBAAA,CAEF,KACE,wBAAA,CACA,YAAA,CACA,0BAAA,CAEA,QAAA,CAEF,cACE,aAbY,CAed,SACE,YAAA,CACA,8BAAA,CACA,uEACA,CAGA,oBAAA,CACA,sBAAA,CACA,WAAA,CACA,wBA1BI,CA6BN,UACE,kBAAA,CACA,iBAAA,CACA,wBAhCI,CAkCN,YACE,oBAAA,CAEF,aACE,cAAA,CAEF,cACE,aAAA,CAEF,YACE,gBAAA,CAEF,gBACE,YAAA,CACA,0BAAA,CACA,mBACE,mBAAA,CAIJ,mBACE,YAAA,CACA,yCAAA,CAGF,uBACE,YAAA,CACA,wBA7DI,CA8DJ,0BAAA,CACA,sBAAA,CACA,kBAAA,CAEF,YACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA",sourcesContent:["$pop: #8685EF;\n$dark-bg-text:#00AC7C;\n\nbody{\n  background-color: #3f3f3f;\n}\nmain{\n  background-color: #3f3f3f;\n  display:grid;\n  grid-template-rows: 1fr 1fr;\n  \n  gap:20px;\n}\n.dark-bg-text{\n  color: $dark-bg-text;\n}\n.weather{\n  display:grid;\n  grid-template-columns: 1fr .8fr;\n  grid-template-areas: \n  'location location'\n  'img  temp'\n  'conditions button';\n  align-content: center;\n  justify-content: center;\n  padding:2em;\n  background-color: $pop;\n  \n}\n#location{\n  grid-area: location;\n  text-align: center;\n  background-color: $pop;\n}\n#conditions{\n  grid-area: conditions;\n}\n#temperature{\n  grid-area: temp;\n}\n#weather-icon{\n  grid-area: img;\n}\n#changeTemp{\n  grid-area: button;\n}\n.container-5day{\n  display:grid;\n  grid-template-rows: 1fr 1fr;\n  h1{\n    justify-self: center;\n  }\n}\n\n.five-day-forecast{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n\n}\n.five-day-forecast > div{\n  display:grid;\n  background-color: $pop;\n  grid-template-rows:1fr 1fr ;\n  justify-content: center;\n  align-items: center;\n}\n#enter-city{\n  display:flex;\n  flex-direction:column;\n  align-items: center;\n  gap:10px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var p=n(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var f=o(u,r);r.byIndex=c,t.splice(c,0,{identifier:A,updater:f,references:1})}i.push(A)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),c=n(565),s=n.n(c),d=n(216),l=n.n(d),A=n(589),p=n.n(A),u=n(99),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class m{constructor(e){this.listOf3Hours=e.list,this.days=[]}get5Dates=e=>{for(let t=0;t<e.length;t+=1)e[t].dt_txt.includes("00:00:00")&&this.days.push(e[t])}}const g=async(e,t,n)=>{if(void 0!==e&&void 0!==t){const r=await fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&appid=${n}`,{mode:"cors"}),o=await r.json(),a=new m(o);a.get5Dates(a.listOf3Hours),(e=>{console.log(e.days);const t=(()=>{const e=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],t=[];let n=(new Date).getDay();for(let r=0;r<5;r+=1)n+=1,n>=7&&(n=0),t.push(e[n]);return t})();for(let n=0;n<e.days.length;n+=1){const r=document.getElementById(`day${n}`);r.innerHTML="";const o=`http://openweathermap.org/img/w/${e.days[n].weather[0].icon}.png`,a=document.createElement("img");a.src=`${o}`;const i=document.createElement("p");i.innerText=`${t[n]}`,r.append(a,i)}})(a)}};document.getElementById("temperature");class y{constructor(e){this.locationId=e.id,this.iconForWeather=`http://openweathermap.org/img/w/${e.weather[0].icon}.png`,this.location=e.name,this.description=e.weather[0].description,this.temperature=document.getElementById("temperature"),(()=>{const e=document.getElementById("location"),t=document.getElementById("conditions"),n=document.getElementById("weather-icon");e.innerText=this.location,t.innerText=this.description,n.src=this.iconForWeather})()}}let h=!0;let C,v;const E="5a0666d038ba8f944ba08c0c14ce62df",b=(e,t)=>{((e,t,n)=>{console.log(h),h?(((e,t)=>{t.innerHTML=e,document.getElementById("changeTemp").innerText="Change To Celsius"})(t,n),h=!1):h||(((e,t)=>{t.innerHTML=e,document.getElementById("changeTemp").innerText="Change To Fahrenheit"})(e,n),h=!0)})(e,t,document.getElementById("temperature"))},w=async e=>{try{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=${E}`,{mode:"cors"}),n=await t.json(),r=(new y(n),n.coord.lat),o=n.coord.lon;g(r,o,E),C=(e=>{const t=parseInt(e,10)-273.15;let n=Math.round(t).toString();return n+="&#x2103",n})(n.main.temp),v=(e=>{const t=1.8*(parseInt(e,10)-273.15)+32;let n=Math.round(t).toString();return n+="&#8457",n})(n.main.temp),b(C,v),b(C,v)}catch(e){alert(e)}};document.getElementById("changeTemp").addEventListener("click",(()=>{b(C,v)})),w("montreal"),(e=>{const t=document.getElementById("enter-city"),n=document.getElementById("city");t.addEventListener("submit",(t=>{console.log(n),t.preventDefault(),e(n.value),n.value=""}))})(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,