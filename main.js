(()=>{"use strict";var e={99:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,'html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:"";content:none}table{border-collapse:collapse;border-spacing:0}h1{font-size:2.5em;margin-left:.7em;margin-top:.5em;background-color:rgba(134,133,239,.2);padding-left:.5em;padding:.2em;color:#00ac7c}h2{font-size:2em}body{background-color:#3f3f3f}main{background-color:#3f3f3f;display:grid;gap:20px}main h2{text-align:center;margin-top:2em}.dark-bg-text{color:#00ac7c}.weather{display:grid;grid-template-rows:1fr .5fr .5fr;grid-template-areas:"location location" "img  img" "tempandbutton tempandbutton" "conditions conditions" "details details1";align-content:center;justify-content:center;background-color:rgba(0,172,124,.6);border-radius:12px;margin-left:20px;margin-right:20px;padding:1.5em;gap:1em}@media(max-width: 700px){.weather{padding:1em}}#location{grid-area:location;text-align:center;background-color:rgba(134,133,239,.3);padding:.2em .5em;border-radius:12em}#conditions{grid-area:conditions;align-self:center;justify-self:center;background-color:rgba(134,133,239,.5);padding:.5em 1em;border:2px solid #000;border-radius:5em}#temperature{align-self:center;justify-self:center;font-size:2em}#weather-icon{grid-area:img;align-self:center;justify-self:center}#changeTemp{align-self:center;border-radius:10px;border:none;padding:10px 12px;background-color:rgba(255,0,0,.6)}#changeTemp:hover{cursor:pointer;background-color:rgba(255,0,0,.8);transform:scale(1.1)}.temp-feel{grid-area:details}.humidity{grid-area:details1}.temp-feel,.humidity{display:flex;flex-direction:column;justify-content:center;align-items:center;gap:10px;padding:.5em;background-color:rgba(134,133,239,.5);border-radius:5px;border:2px solid #000}.container-5day{display:grid;grid-template-rows:1fr 1fr}@media(max-width: 700px){.container-5day{grid-template-rows:1fr;gap:3em}}.container-5day h1{justify-self:center}.five-day-forecast{display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr;margin-right:20px;margin-left:20px;border-radius:15px;padding:1.5em;background-color:rgba(134,133,239,.7)}@media(max-width: 700px){.five-day-forecast{grid-template-columns:1fr;grid-template-rows:1fr 1fr 1fr 1fr 1fr;border-radius:30px;padding:1em}}.five-day-forecast>div{display:grid;grid-template-rows:1fr 1fr;justify-content:center;align-items:center}@media(max-width: 700px){.five-day-forecast>div{justify-content:start;margin-left:2em;padding:1em;border-bottom:5px solid #000}}#enter-city{display:flex;flex-direction:column;align-items:center;gap:10px;background-color:rgba(134,133,239,.6);margin-left:auto;margin-right:auto;padding:1em 3em}.temp-and-button{display:flex;justify-content:center;align-items:center;grid-area:tempandbutton}',"",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AACA,2ZAaC,QAAA,CACA,SAAA,CACA,QAAA,CACA,cAAA,CACA,YAAA,CACA,uBAAA,CAGD,8EAEC,aAAA,CAED,KACC,aAAA,CAED,MACC,eAAA,CAED,aACC,WAAA,CAED,oDAEC,UAAA,CACA,YAAA,CAED,MACC,wBAAA,CACA,gBAAA,CAOD,GACE,eAAA,CACA,gBAAA,CACA,eAAA,CACA,qCAAA,CACA,iBAAA,CACA,YAAA,CACA,aATY,CAad,GACE,aAAA,CAIF,KACE,wBAAA,CAEF,KACE,wBAAA,CACA,YAAA,CACA,QAAA,CACA,QACE,iBAAA,CACA,cAAA,CAGJ,cACE,aA/BY,CAiCd,SACE,YAAA,CACA,gCAAA,CACA,2HACA,CAKA,oBAAA,CACA,sBAAA,CACA,mCAAA,CACA,kBAAA,CACA,gBAAA,CACA,iBAAA,CACA,aAAA,CACA,OAAA,CAEA,yBAlBF,SAmBI,WAAA,CAAA,CAKJ,UACE,kBAAA,CACA,iBAAA,CACA,qCAAA,CACA,iBAAA,CACA,kBAAA,CAEF,YACE,oBAAA,CACA,iBAAA,CACA,mBAAA,CACA,qCAAA,CACA,gBAAA,CACA,qBAAA,CACA,iBAAA,CAEF,aACE,iBAAA,CACA,mBAAA,CACA,aAAA,CAEF,cACE,aAAA,CACA,iBAAA,CACA,mBAAA,CAEF,YACE,iBAAA,CACA,kBAAA,CACA,WAAA,CACA,iBAAA,CACA,iCAAA,CAGA,kBACE,cAAA,CACA,iCAAA,CACA,oBAAA,CAKJ,WACE,iBAAA,CAEF,UACE,kBAAA,CAEF,qBACE,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,QAAA,CACA,YAAA,CACA,qCAAA,CACA,iBAAA,CACA,qBAAA,CAEF,gBACE,YAAA,CACA,0BAAA,CACA,yBAHF,gBAII,sBAAA,CACA,OAAA,CAAA,CAEF,mBACE,mBAAA,CAIJ,mBACE,YAAA,CACA,yCAAA,CACA,iBAAA,CACA,gBAAA,CACA,kBAAA,CACA,aAAA,CACA,qCAAA,CACA,yBARF,mBASI,yBAAA,CACA,sCAAA,CACA,kBAAA,CACA,WAAA,CAAA,CAIJ,uBACE,YAAA,CACA,0BAAA,CACA,sBAAA,CACA,kBAAA,CACA,yBALF,uBAMI,qBAAA,CACA,eAAA,CACA,WAAA,CACA,4BAAA,CAAA,CAKJ,YACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA,CACA,qCAAA,CACA,gBAAA,CACA,iBAAA,CACA,eAAA,CAGF,iBACE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,uBAAA",sourcesContent:["// -- Meyer reset\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n// -- Meyer Reset End\n\n$pop: #8685EF;\n$dark-bg-text:#00AC7C;\n$small-screen: 700px;\nh1{\n  font-size: 2.5em;\n  margin-left: .7em;\n  margin-top: .5em;\n  background-color: rgba($pop,0.2);\n  padding-left: 0.5em;\n  padding:.2em;\n  color: $dark-bg-text;\n\n\n}\nh2{\n  font-size:2em;\n  \n}\n\nbody{\n  background-color: #3f3f3f;\n}\nmain{\n  background-color: #3f3f3f;\n  display:grid;  \n  gap:20px;\n  h2{\n    text-align: center;\n    margin-top: 2em;\n  }\n}\n.dark-bg-text{\n  color: $dark-bg-text;\n}\n.weather{\n  display:grid;\n  grid-template-rows:1fr .5fr .5fr;\n  grid-template-areas: \n  'location location'\n  'img  img'\n  'tempandbutton tempandbutton'\n  'conditions conditions'\n  'details details1';\n  align-content: center;\n  justify-content: center;\n  background-color: rgba($dark-bg-text, 0.6);\n  border-radius: 12px;\n  margin-left: 20px;\n  margin-right: 20px;\n  padding: 1.5em;\n  gap:1em;\n\n  @media (max-width: $small-screen) {\n    padding: 1em;\n\n  }\n  \n}\n#location{\n  grid-area: location;\n  text-align: center;\n  background-color: rgba($pop, 0.3);\n  padding:0.2em 0.5em;\n  border-radius: 12em;\n}\n#conditions{\n  grid-area: conditions;\n  align-self: center;\n  justify-self: center;\n  background-color: rgba($pop, 0.5);\n  padding:0.5em 1em;\n  border: 2px solid black;\n  border-radius: 5em;\n}\n#temperature{\n  align-self: center;\n  justify-self: center;\n  font-size:2em;\n}\n#weather-icon{\n  grid-area: img;\n  align-self: center;\n  justify-self: center;\n}\n#changeTemp{\n  align-self: center;\n  border-radius: 10px;\n  border:none;\n  padding:10px 12px;\n  background-color: rgba(red, 0.6);\n  \n\n  &:hover{\n    cursor: pointer;\n    background-color: rgba(red, 0.8);\n    transform:scale(1.1);\n\n  }\n  \n}\n.temp-feel{\n  grid-area: details;\n}\n.humidity{\n  grid-area: details1;\n}\n.temp-feel, .humidity{\n  display:flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap:10px;\n  padding:0.5em;\n  background-color: rgba($pop, 0.5);\n  border-radius: 5px;\n  border: 2px solid black;\n}\n.container-5day{\n  display:grid;\n  grid-template-rows: 1fr 1fr;\n  @media (max-width: $small-screen) {\n    grid-template-rows:1fr;\n    gap:3em;\n  }\n  h1{\n    justify-self: center;\n  }\n}\n\n.five-day-forecast{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  margin-right: 20px;\n  margin-left: 20px;\n  border-radius:15px;\n  padding:1.5em;\n  background-color: rgba($pop, 0.7);\n  @media (max-width: $small-screen) {\n    grid-template-columns: 1fr;\n    grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\n    border-radius:30px;\n    padding: 1em;\n  }\n\n}\n.five-day-forecast > div{\n  display:grid;\n  grid-template-rows:1fr 1fr ;\n  justify-content: center;\n  align-items: center;\n  @media (max-width: $small-screen) {\n    justify-content: start;\n    margin-left: 2em;\n    padding:1em;\n    border-bottom: 5px solid black;\n  }\n\n  \n}\n#enter-city{\n  display:flex;\n  flex-direction:column;\n  align-items: center;\n  gap:10px;\n  background-color: rgba($pop, 0.6);\n  margin-left: auto;\n  margin-right: auto;\n  padding:1em 3em;\n}\n\n.temp-and-button{\n  display:flex;\n  justify-content: center;\n  align-items: center;\n  grid-area: tempandbutton;\n}"],sourceRoot:""}]);const A=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var s=this[A][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],A=0;A<e.length;A++){var s=e[A],d=r.base?s[0]+r.base:s[0],c=o[d]||0,l="".concat(d," ").concat(c);o[d]=c+1;var p=t(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var u=a(m,r);r.byIndex=A,n.splice(A,0,{identifier:l,updater:u,references:1})}i.push(l)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var A=t(o[i]);n[A].references--}for(var s=r(e,a),d=0;d<o.length;d++){var c=t(o[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),A=t(565),s=t.n(A),d=t(216),c=t.n(d),l=t(589),p=t.n(l),m=t(99),u={};u.styleTagTransform=p(),u.setAttributes=s(),u.insert=i().bind(null,"head"),u.domAPI=a(),u.insertStyleElement=c(),n()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals;let g=!0;const C=e=>{const n=parseInt(e,10)-273.15;let t=Math.round(n).toString();return t+="&#x2103",t},f=e=>{const n=1.8*(parseInt(e,10)-273.15)+32;let t=Math.round(n).toString();return t+="&#8457",t},h=(e,n)=>{n.innerHTML=e,document.getElementById("changeTemp").innerText="C"},b=(e,n)=>{n.innerHTML=e,document.getElementById("changeTemp").innerText="F"},y=(e,n,t)=>{const r=document.getElementById(t);g?h(e,r):b(n,r)},v=e=>e.reduce(((e,n)=>e+n),0)/e.length;class x{constructor(e){this.listOf3Hours=e.list,this.days=[],this.every3HoursStartingFromTomorrow=[],this.averageTemps=[],this.arrayItemCounter=0,this.celsTemps=[],this.farTemps=[],this.listenerIds=[]}get5Dates=e=>{let n=!1;for(let t=0;t<e.length;t+=1)e[t].dt_txt.includes("00:00:00")&&(this.days.push(e[t]),n=!0),n&&this.every3HoursStartingFromTomorrow.push(e[t]);this.averageTemps=(e=>{const n=(e=>{let n=[];const t=[];let r=0;for(let a=0;a<e.length;a+=1)n.push(e[a].main.temp),r+=1,r>7&&(t.push(n),n=[],r=0);return r<7&&t.push(n),t})(e);return(e=>{const n=[];for(let t=0;t<e.length;t+=1)n.push(v(e[t]));return n})(n)})(this.every3HoursStartingFromTomorrow)};celsAndFarTempLoop=e=>{for(let n=0;n<e.length;n+=1)this.celsTemps.push(C(e[n])),this.farTemps.push(f(e[n]))}}const B=async(e,n,t)=>{if(void 0!==e&&void 0!==n){const r=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${n}&appid=${t}`,{mode:"cors"}),a=await r.json(),o=new x(a);o.get5Dates(o.listOf3Hours),(e=>{e.celsAndFarTempLoop(e.averageTemps);const n=(()=>{const e=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],n=[];let t=(new Date).getDay();for(let r=0;r<5;r+=1)t+=1,t>=7&&(t=0),n.push(e[t]);return n})();for(let t=0;t<e.days.length;t+=1){const r=document.getElementById(`day${t}`);r.innerHTML="";const a=`https://openweathermap.org/img/w/${e.days[t].weather[0].icon}.png`,o=document.createElement("img");o.src=`${a}`;const i=document.createElement("p");i.innerHTML="",i.id=`temperature-5-day${[t]}`,i.className="5-day-temps",r.append(i);const A=i.id;y(e.celsTemps[t],e.farTemps[t],A),e.listenerIds.push(A);const s=document.createElement("p");s.innerText=`${n[t]}`,r.append(o,s)}document.getElementById("changeTemp").addEventListener("click",(()=>{for(let n=0;n<e.listenerIds.length;n+=1){const t=e.listenerIds[n];y(e.celsTemps[n],e.farTemps[n],t)}}))})(o)}};class k{constructor(e){this.locationId=e.id,console.log(e),this.iconForWeather=`https://openweathermap.org/img/w/${e.weather[0].icon}.png`,this.location=e.name,this.description=e.weather[0].description,this.humidity=e.main.humidity,this.celsFeelsLike=C(e.main.feels_like),this.farFeelsLike=f(e.main.feels_like),(()=>{const e=document.getElementById("location"),n=document.getElementById("conditions"),t=document.getElementById("weather-icon"),r=document.getElementById("changeTemp"),a=document.getElementById("humidity");y(this.celsFeelsLike,this.farFeelsLike,"feels-like"),r.addEventListener("click",(()=>{y(this.celsFeelsLike,this.farFeelsLike,"feels-like")})),e.innerText=this.location,n.innerText=this.description,t.src=this.iconForWeather,a.innerText=`${this.humidity}%`})()}}let E,w;const T="5a0666d038ba8f944ba08c0c14ce62df",I=async e=>{try{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=${T}`,{mode:"cors"}),t=await n.json(),r=(new k(t),t.coord.lat),a=t.coord.lon;B(r,a,T),E=(e=>{const n=parseInt(e,10)-273.15;let t=Math.round(n).toString();return t+="&#xb0",t})(t.main.temp),w=(e=>{const n=1.8*(parseInt(e,10)-273.15)+32;let t=Math.round(n).toString();return t+="&#xb0",t})(t.main.temp),y(E,w,"temperature")}catch(e){alert(e)}};document.getElementById("changeTemp").addEventListener("click",(()=>{var e;e="temperature",((e,n,t)=>{g?(b(n,t),g=!1):g||(h(e,t),g=!0)})(E,w,document.getElementById(e))})),I("montreal"),(e=>{const n=document.getElementById("enter-city"),t=document.getElementById("city");n.addEventListener("submit",(n=>{console.log(t),n.preventDefault(),e(t.value),t.value=""}))})(I)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,