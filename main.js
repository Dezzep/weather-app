(()=>{"use strict";var e={99:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'body{background-color:#3f3f3f}main{background-color:#3f3f3f;display:grid;grid-template-rows:1fr 1fr;gap:20px}.dark-bg-text{color:#00ac7c}.weather{display:grid;grid-template-columns:1fr .8fr;grid-template-areas:"location location" "img  temp" "conditions button";align-content:center;justify-content:center;padding:2em;background-color:#8685ef}#location{grid-area:location;text-align:center;background-color:#8685ef}#conditions{grid-area:conditions}#temperature{grid-area:temp}#weather-icon{grid-area:img}#changeTemp{grid-area:button}.container-5day{display:grid;grid-template-rows:1fr 1fr}.container-5day h1{justify-self:center}.five-day-forecast{display:grid;grid-template-columns:1fr 1fr 1fr 1fr 1fr}.five-day-forecast>div{display:grid;background-color:#8685ef;grid-template-rows:1fr 1fr;justify-content:center;align-items:center}#enter-city{display:flex;flex-direction:column;align-items:center;gap:10px}',"",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAGA,KACE,wBAAA,CAEF,KACE,wBAAA,CACA,YAAA,CACA,0BAAA,CAEA,QAAA,CAEF,cACE,aAbY,CAed,SACE,YAAA,CACA,8BAAA,CACA,uEACA,CAGA,oBAAA,CACA,sBAAA,CACA,WAAA,CACA,wBA1BI,CA6BN,UACE,kBAAA,CACA,iBAAA,CACA,wBAhCI,CAkCN,YACE,oBAAA,CAEF,aACE,cAAA,CAEF,cACE,aAAA,CAEF,YACE,gBAAA,CAEF,gBACE,YAAA,CACA,0BAAA,CACA,mBACE,mBAAA,CAIJ,mBACE,YAAA,CACA,yCAAA,CAGF,uBACE,YAAA,CACA,wBA7DI,CA8DJ,0BAAA,CACA,sBAAA,CACA,kBAAA,CAEF,YACE,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,QAAA",sourcesContent:["$pop: #8685EF;\n$dark-bg-text:#00AC7C;\n\nbody{\n  background-color: #3f3f3f;\n}\nmain{\n  background-color: #3f3f3f;\n  display:grid;\n  grid-template-rows: 1fr 1fr;\n  \n  gap:20px;\n}\n.dark-bg-text{\n  color: $dark-bg-text;\n}\n.weather{\n  display:grid;\n  grid-template-columns: 1fr .8fr;\n  grid-template-areas: \n  'location location'\n  'img  temp'\n  'conditions button';\n  align-content: center;\n  justify-content: center;\n  padding:2em;\n  background-color: $pop;\n  \n}\n#location{\n  grid-area: location;\n  text-align: center;\n  background-color: $pop;\n}\n#conditions{\n  grid-area: conditions;\n}\n#temperature{\n  grid-area: temp;\n}\n#weather-icon{\n  grid-area: img;\n}\n#changeTemp{\n  grid-area: button;\n}\n.container-5day{\n  display:grid;\n  grid-template-rows: 1fr 1fr;\n  h1{\n    justify-self: center;\n  }\n}\n\n.five-day-forecast{\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n\n}\n.five-day-forecast > div{\n  display:grid;\n  background-color: $pop;\n  grid-template-rows:1fr 1fr ;\n  justify-content: center;\n  align-items: center;\n}\n#enter-city{\n  display:flex;\n  flex-direction:column;\n  align-items: center;\n  gap:10px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=a[d]||0,p="".concat(d," ").concat(l);a[d]=l+1;var u=n(p),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(A);else{var m=o(A,r);r.byIndex=c,t.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=r(e,o),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),c=n(565),s=n.n(c),d=n(216),l=n.n(d),p=n(589),u=n.n(p),A=n(99),m={};m.styleTagTransform=u(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;let f=!0;const g=e=>{const t=parseInt(e,10)-273.15;let n=Math.round(t).toString();return n+="&#x2103",n},h=e=>{const t=1.8*(parseInt(e,10)-273.15)+32;let n=Math.round(t).toString();return n+="&#8457",n},y=(e,t)=>{t.innerHTML=e,document.getElementById("changeTemp").innerText="Change To Fahrenheit"},C=(e,t)=>{t.innerHTML=e,document.getElementById("changeTemp").innerText="Change To Celsius"},v=(e,t,n)=>{const r=document.getElementById(n);f?y(e,r):C(t,r)},E=e=>e.reduce(((e,t)=>e+t),0)/e.length;class b{constructor(e){this.listOf3Hours=e.list,this.days=[],this.every3HoursStartingFromTomorrow=[],this.averageTemps=[],this.arrayItemCounter=0,this.celsTemps=[],this.farTemps=[],this.listenerIds=[]}get5Dates=e=>{let t=!1;for(let n=0;n<e.length;n+=1)e[n].dt_txt.includes("00:00:00")&&(this.days.push(e[n]),t=!0),t&&this.every3HoursStartingFromTomorrow.push(e[n]);this.averageTemps=(e=>{const t=(e=>{let t=[];const n=[];let r=0;for(let o=0;o<e.length;o+=1)t.push(e[o].main.temp),r+=1,r>7&&(n.push(t),t=[],r=0);return r<7&&n.push(t),n})(e);return(e=>{const t=[];for(let n=0;n<e.length;n+=1)t.push(E(e[n]));return t})(t)})(this.every3HoursStartingFromTomorrow)};celsAndFarTempLoop=e=>{for(let t=0;t<e.length;t+=1)this.celsTemps.push(g(e[t])),this.farTemps.push(h(e[t]))}}const w=async(e,t,n)=>{if(void 0!==e&&void 0!==t){const r=await fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${e}&lon=${t}&appid=${n}`,{mode:"cors"}),o=await r.json(),a=new b(o);a.get5Dates(a.listOf3Hours),(e=>{console.log(e.days),e.celsAndFarTempLoop(e.averageTemps);const t=(()=>{const e=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],t=[];let n=(new Date).getDay();for(let r=0;r<5;r+=1)n+=1,n>=7&&(n=0),t.push(e[n]);return t})();for(let n=0;n<e.days.length;n+=1){const r=document.getElementById(`day${n}`);r.innerHTML="";const o=`http://openweathermap.org/img/w/${e.days[n].weather[0].icon}.png`,a=document.createElement("img");a.src=`${o}`;const i=document.createElement("p");i.innerHTML="",i.id=`temperature-5-day${[n]}`,i.className="5-day-temps",r.append(i);const c=i.id;v(e.celsTemps[n],e.farTemps[n],c),e.listenerIds.push(c);const s=document.createElement("p");s.innerText=`${t[n]}`,r.append(a,s)}console.log(e.listenerIds),document.getElementById("changeTemp").addEventListener("click",(()=>{for(let t=0;t<e.listenerIds.length;t+=1){const n=e.listenerIds[t];v(e.celsTemps[t],e.farTemps[t],n)}}))})(a)}};class T{constructor(e){this.locationId=e.id,this.iconForWeather=`http://openweathermap.org/img/w/${e.weather[0].icon}.png`,this.location=e.name,this.description=e.weather[0].description,this.temperature=document.getElementById("temperature"),(()=>{const e=document.getElementById("location"),t=document.getElementById("conditions"),n=document.getElementById("weather-icon");e.innerText=this.location,t.innerText=this.description,n.src=this.iconForWeather})()}}let B,x;const I="5a0666d038ba8f944ba08c0c14ce62df",k=async e=>{try{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=${I}`,{mode:"cors"}),n=await t.json(),r=(new T(n),n.coord.lat),o=n.coord.lon;w(r,o,I),B=g(n.main.temp),x=h(n.main.temp),v(B,x,"temperature")}catch(e){alert(e)}};document.getElementById("changeTemp").addEventListener("click",(()=>{var e;e="temperature",((e,t,n)=>{f?(C(t,n),f=!1):f||(y(e,n),f=!0)})(B,x,document.getElementById(e))})),k("montreal"),(e=>{const t=document.getElementById("enter-city"),n=document.getElementById("city");t.addEventListener("submit",(t=>{console.log(n),t.preventDefault(),e(n.value),n.value=""}))})(k)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,